{"/home/travis/build/npmtest/node-npmtest-cloudant/test.js":"/* istanbul instrument in package npmtest_cloudant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cloudant/lib.npmtest_cloudant.js":"/* istanbul instrument in package npmtest_cloudant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cloudant = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cloudant = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cloudant/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cloudant && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cloudant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cloudant\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cloudant.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cloudant.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cloudant.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cloudant.__dirname + '/lib.npmtest_cloudant.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cloudant/node_modules/cloudant/cloudant.js":"module.exports = Cloudant;\n\n/**\n * Copyright (c) 2016 IBM Cloudant, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nvar Nano = require('cloudant-nano');\nvar debug = require('debug')('cloudant');\nvar nanodebug = require('debug')('nano');\nvar async = require('async');\n\n\n// function from the old Cloudant library to\n// parse an object { account: \"myaccount\", password: \"mypassword\"}\n// and return a URL\nvar reconfigure = require('./lib/reconfigure.js')\n\n// This IS the Cloudant API. It is mostly nano, with a few functions.\nfunction Cloudant(options, callback) {\n  debug('Initialize', options);\n\n  // Save the username and password for potential conversion to cookie auth.\n  var login = reconfigure.getOptions(options);\n\n  // Convert the credentials into a URL that will work for cloudant. The\n  // credentials object will become squashed into a string, which is fine\n  // except for the .cookie option.\n  var cookie = options.cookie;\n\n  var pkg = require('./package.json');\n  var useragent = \"nodejs-cloudant/\" + pkg.version + \" (Node.js \" + process.version + \")\";\n  var requestDefaults = { headers: { \"User-agent\": useragent}, gzip:true  };\n  var theurl = null;\n  if (typeof options == \"object\") {\n    if (options.requestDefaults) {\n      requestDefaults = options.requestDefaults;\n    }\n    theurl = reconfigure(options);\n  } else {\n    theurl = reconfigure({ url: options})\n  }\n  if (theurl === null) {\n    if (callback) {\n      return callback('invalid url', null);\n    } else {\n      throw(new Error('invalid url'));\n    }\n  }\n\n  // keep connections alive by default\n  if (requestDefaults && !requestDefaults.agent) {\n    var protocol = (theurl.match(/^https/))? require('https') : require('http');\n    var agent = new protocol.Agent({ keepAlive:true });\n    requestDefaults.agent = agent;\n  } \n\n  // plugin a request library\n  var plugin = null;\n  if (options.plugin) {\n    options.requestDefaults = requestDefaults;\n    if(typeof options.plugin === 'string') {\n      var plugintype = options.plugin || 'default';\n      debug('Using the \"' + plugintype + '\" plugin');\n      plugin =  require('./plugins/' + plugintype)(options);\n    } else if (typeof options.plugin === 'function') { \n      debug('Using a custom plugin');\n      plugin = options.plugin;\n    }\n  }\n\n  debug('Create underlying Nano instance, options=%j requestDefaults=%j', options, requestDefaults);\n  var nano = Nano({url:theurl, request: plugin, requestDefaults: requestDefaults, cookie: cookie, log: nanodebug});\n\n  // our own implementation of 'use' e.g. nano.use or nano.db.use\n  // it includes all db-level functions\n  var use = function(db) {\n\n    // ****************\n    // Functions added to each db e.g. cloudant.use(\"mydb\")\n    // ****************\n\n    var bulk_get = function(options, callback) {\n      return nano.request( { path: encodeURIComponent(db) + \"/_bulk_get\",\n                             method: \"post\",\n                             body: options }, callback)\n    };\n\n    // https://docs.cloudant.com/geo.html\n    var geo = function(docName, indexName, query, callback) {\n      var path = encodeURIComponent(db) + \"/_design/\" +\n                 encodeURIComponent(docName) + \"/_geo/\" +\n                 encodeURIComponent(indexName);\n      return nano.request({path:path, qs:query}, callback);\n    };\n\n    // https://docs.cloudant.com/api.html#viewing-permissions\n    var get_security = function(callback) {\n      var path = \"_api/v2/db/\" + encodeURIComponent(db) + \"/_security\";\n      return nano.request( { path: path}, callback);\n    };\n\n    // https://docs.cloudant.com/api.html#modifying-permissions\n    var set_security = function(permissions, callback) {\n      var path = \"_api/v2/db/\" + encodeURIComponent(db) + \"/_security\";\n      return nano.request( { path: path,\n                             method: \"put\",\n                             body: {cloudant: permissions} }, callback);\n    };\n\n    // https://docs.cloudant.com/api.html#list-all-indexes &\n    // https://docs.cloudant.com/api.html#creating-a-new-index\n    var index = function(definition, callback) {\n\n      // if no definition is provided, then the user wants see all the indexes\n      if (typeof definition == \"function\") {\n        callback = definition;\n        nano.request({ path: encodeURIComponent(db) + \"/_index\" }, callback);\n      } else {\n        // the user wants to create a new index\n        return nano.request({ path: encodeURIComponent(db) + \"/_index\",\n                              method:\"post\",\n                              body: definition}, callback);\n      }\n    };\n\n    // https://docs.cloudant.com/api.html#deleting-an-index\n    var index_del = function(spec, callback) {\n      spec = spec || {};\n      if (!spec.ddoc)\n        throw new Error('index.del() must specify a \"ddoc\" value');\n      if (!spec.name)\n        throw new Error('index.del() must specify a \"name\" value');\n      var type = spec.type || 'json';\n      var path = encodeURIComponent(db) + \"/_index/\" +\n                 encodeURIComponent(spec.ddoc) + \"/\" +\n                 encodeURIComponent(type) + \"/\" +\n                 encodeURIComponent(spec.name);\n      return nano.request({ path:path, method:\"delete\"}, callback);\n    };\n\n    // https://docs.cloudant.com/api.html#finding-documents-using-an-index\n    var find = function(query, callback) {\n      return nano.request( { path: encodeURIComponent(db) + \"/_find\",\n                             method: \"post\",\n                             body: query}, callback);\n    };\n\n    // add Cloudant special functions\n    var obj = nano._use(db);\n    obj.geo = geo;\n    obj.bulk_get = bulk_get;\n    obj.get_security = get_security;\n    obj.set_security = set_security;\n    obj.index = index;\n    obj.index.del = index_del;\n    obj.find = find;\n\n    return obj;\n  };\n\n  // intercept calls to 'nano.use' to plugin our extensions\n  nano._use = nano.use;\n  nano.use = nano.db.use = use;\n\n\n  // https://docs.cloudant.com/api.html#creating-api-keys\n  var generate_api_key = function(callback) {\n    return nano.request({path: \"_api/v2/api_keys\", method: \"post\" }, callback);\n  };\n\n  // https://docs.cloudant.com/api.html#reading-the-cors-configuration\n  var get_cors = function(callback) {\n    return nano.request({path: \"_api/v2/user/config/cors\" }, callback);\n  };\n\n  // https://docs.cloudant.com/api.html#setting-the-cors-configuration\n  var set_cors = function(configuration, callback) {\n    return nano.request({path: \"_api/v2/user/config/cors\",\n                         method: \"put\",\n                         body: configuration }, callback);\n  };\n\n  // the /set_permissions API call is deprecated\n  var set_permissions = function(opts, callback) {\n    console.error(\"set_permissions is deprecated. use set_security instead\");\n    callback(null, null);\n  };\n\n  // https://docs.cloudant.com/api.html#setting-the-cors-configuration\n  var set_cors = function(configuration, callback) {\n    return nano.request({path: \"_api/v2/user/config/cors\",\n                         method: \"put\",\n                         body: configuration }, callback);\n  };\n\n  var get_virtual_hosts = function(callback) {\n    return nano.request({path: \"_api/v2/user/virtual_hosts\",\n                         method: \"get\"}, callback);\n  };\n\n  var add_virtual_host = function(opts, callback) {\n    return nano.request({path: \"_api/v2/user/virtual_hosts\",\n                         method: \"post\",\n                         body: opts }, callback);\n  };\n\n  var delete_virtual_host = function(opts, callback) {\n    return nano.request({path: \"_api/v2/user/virtual_hosts\",\n                         method: \"delete\",\n                         body: opts }, callback);\n  };\n\n  // add top-level Cloudant-specific functions\n  nano.ping = ping;\n  nano.get_cors = get_cors;\n  nano.set_cors = set_cors;\n  nano.set_permissions = set_permissions;\n  nano.generate_api_key = generate_api_key;\n  nano.get_virtual_hosts = get_virtual_hosts;\n  nano.add_virtual_host = add_virtual_host;\n  nano.delete_virtual_host = delete_virtual_host;\n\n  if (callback) {\n    debug('Automatic ping');\n    nano.ping(login, function(er, pong, cookie) {\n      if (er) {\n        callback(er);\n      } else {\n        if (cookie) {\n          requestDefaults.headers.cookie = cookie;\n        }\n\n        callback(null, nano, pong);\n      }\n    });\n  }\n\n  return nano;\n}\n\nfunction ping(login, callback) {\n  var nano = this;\n  var cookie = null;\n\n  async.series([\n    function(done) {\n      if (login && login.username && login.password) {\n        done.auth = false;\n        nano.auth(login.username, login.password, function(e, b, h) {\n          cookie = (h && h['set-cookie']) || null;\n          if (cookie) {\n            cookie = cookie[0];\n          }\n          done(e, b);\n        });\n      } else {\n        done(null, null);\n      }\n    },\n    function(done) {\n      nano.session(function(e, b, h) {\n        done(e, b);\n      });\n    }, \n    function(done) {\n      nano.relax({db:''}, function(e, b, h) {\n        done(e, b);\n      })\n    }\n  ], function(err, data) {\n    var body = (data && data[2]) || {};\n    body.userCtx  = (data && data[1] && data[1].userCtx) || {};\n    callback(err, body, cookie);\n  });\n}\n\n\n","/home/travis/build/npmtest/node-npmtest-cloudant/node_modules/cloudant-nano/lib/nano.js":"// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n// use this file except in compliance with the License. You may obtain a copy of\n// the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations under\n// the License.\n\n'use strict';\n\nvar u = require('url');\nvar assert = require('assert');\nvar querystring = require('querystring');\nvar request = require('request');\nvar errs = require('errs');\nvar _ = require('underscore');\nvar follow = require('follow');\nvar logger = require('./logger');\n\nvar nano;\n\nmodule.exports = exports = nano = function dbScope(cfg) {\n  var serverScope = {};\n\n  if (typeof cfg === 'string') {\n    cfg = {url: cfg};\n  }\n\n  assert.equal(typeof cfg, 'object',\n    'You must specify the endpoint url when invoking this module');\n  assert.ok(/^https?:/.test(cfg.url), 'url is not valid');\n\n  cfg = _.clone(cfg);\n\n  serverScope.config = cfg;\n  cfg.requestDefaults = cfg.requestDefaults || {jar: false};\n\n  var httpAgent = (typeof cfg.request === 'function') ? cfg.request :\n    request.defaults(cfg.requestDefaults);\n  var followAgent = (typeof cfg.follow === 'function') ? cfg.follow : follow;\n  var log = typeof cfg.log === 'function' ? cfg.log : logger(cfg);\n  var parseUrl = 'parseUrl' in cfg ? cfg.parseUrl : true;\n\n  function maybeExtractDatabaseComponent() {\n    if (!parseUrl) {\n      return;\n    }\n\n    var path = u.parse(cfg.url);\n    var pathArray = path.pathname.split('/').filter(function(e) { return e; });\n    var db = pathArray.pop();\n    var rootPath = path.pathname.replace(/\\/?$/, '/..');\n\n    if (db) {\n      cfg.url = urlResolveFix(cfg.url, rootPath).replace(/\\/?$/, '');\n      return db;\n    }\n  }\n\n  function scrub(str) {\n    if (str) {\n      str = str.replace(/\\/\\/(.*)@/,\"//XXXXXX:XXXXXX@\");\n    }\n    return str;\n  }\n\n  function relax(opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {path: ''};\n    }\n\n    if (typeof opts === 'string') {\n      opts = {path: opts};\n    }\n\n    if (!opts) {\n      opts = {path: ''};\n      callback = null;\n    }\n\n    var qs = _.extend({}, opts.qs);\n\n    var headers = {\n      'content-type': 'application/json',\n      accept: 'application/json'\n    };\n\n    var req = {\n      method: (opts.method || 'GET'),\n      headers: headers,\n      uri: cfg.url\n    };\n\n    var parsed;\n    var rh;\n\n    // https://github.com/mikeal/request#requestjar\n    var isJar = opts.jar || cfg.jar;\n\n    if (isJar) {\n      req.jar = isJar;\n    }\n\n    // http://wiki.apache.org/couchdb/HTTP_database_API#Naming_and_Addressing\n    if (opts.db) {\n      req.uri = urlResolveFix(req.uri, encodeURIComponent(opts.db));\n    }\n\n    if (opts.multipart) {\n      req.multipart = opts.multipart;\n    }\n\n    req.headers = _.extend(req.headers, opts.headers, cfg.defaultHeaders);\n\n    if (opts.path) {\n      req.uri += '/' + opts.path;\n    } else if (opts.doc) {\n      if (!/^_design/.test(opts.doc)) {\n        // http://wiki.apache.org/couchdb/HTTP_Document_API#Naming.2FAddressing\n        req.uri += '/' + encodeURIComponent(opts.doc);\n      } else {\n        // http://wiki.apache.org/couchdb/HTTP_Document_API#Document_IDs\n        req.uri += '/' + opts.doc;\n      }\n\n      // http://wiki.apache.org/couchdb/HTTP_Document_API#Attachments\n      if (opts.att) {\n        req.uri += '/' + opts.att;\n      }\n    }\n\n    // prevent bugs where people set encoding when piping\n    if (opts.encoding !== undefined && callback) {\n      req.encoding = opts.encoding;\n      delete req.headers['content-type'];\n      delete req.headers.accept;\n    }\n\n    if (opts.contentType) {\n      req.headers['content-type'] = opts.contentType;\n      delete req.headers.accept;\n    }\n\n    // http://guide.couchdb.org/draft/security.html#cookies\n    if (cfg.cookie) {\n      req.headers['X-CouchDB-WWW-Authenticate'] = 'Cookie';\n      req.headers.cookie = cfg.cookie;\n    }\n\n    // http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n    if (typeof opts.qs === 'object' && !_.isEmpty(opts.qs)) {\n      ['startkey', 'endkey', 'key', 'keys'].forEach(function(key) {\n        if (key in opts.qs) {\n          qs[key] = JSON.stringify(opts.qs[key]);\n        }\n      });\n      req.qs = qs;\n    }\n\n    if (opts.body) {\n      if (Buffer.isBuffer(opts.body) || opts.dontStringify) {\n        req.body = opts.body;\n      } else {\n        req.body = JSON.stringify(opts.body, function(key, value) {\n          // don't encode functions\n          if (typeof(value) === 'function') {\n            return value.toString();\n          } else {\n            return value;\n          }\n        });\n      }\n    }\n\n    if (opts.form) {\n      req.headers['content-type'] =\n        'application/x-www-form-urlencoded; charset=utf-8';\n      req.body = querystring.stringify(opts.form).toString('utf8');\n    }\n\n    log(req);\n\n    if (!callback) {\n      return httpAgent(req);\n    }\n\n    return httpAgent(req, function(e, h, b) { \n      rh = h && h.headers || {};\n      rh.statusCode = h && h.statusCode || 500;\n      rh.uri = req.uri;\n      if (e) {\n        log({err: 'socket', body: b, headers: rh});\n        return callback(errs.merge(e, {\n          message: 'error happened in your connection',\n          scope: 'socket',\n          errid: 'request'\n        }));\n      }\n\n      delete rh.server;\n      delete rh['content-length'];\n\n      if (opts.dontParse) {\n        parsed = b;\n      } else {\n        try { parsed = JSON.parse(b); } catch (err) { parsed = b; }\n      }\n\n      if (rh.statusCode >= 200 && rh.statusCode < 400) {\n        log({err: null, body: parsed, headers: rh});\n        return callback(null, parsed, rh);\n      }\n\n      log({err: 'couch', body: parsed, headers: rh});\n\n      // cloudant stacktrace\n      if (typeof parsed === 'string') {\n        parsed = {message: parsed};\n      }\n\n      if (!parsed.message && (parsed.reason || parsed.error)) {\n        parsed.message = (parsed.reason || parsed.error);\n      }\n\n      // fix cloudant issues where they give an erlang stacktrace as js\n      delete parsed.stack;\n\n      // scrub credentials\n      req.uri = scrub(req.uri);\n      rh.uri = scrub(rh.uri);\n      if (req.headers.cookie) {\n        req.headers.cookie = \"XXXXXXX\";\n      }\n\n      callback(errs.merge({\n        message: 'couch returned ' + rh.statusCode,\n        scope: 'couch',\n        statusCode: rh.statusCode,\n        request: req,\n        headers: rh,\n        errid: 'non_200'\n      }, errs.create(parsed)));\n    });\n  }\n\n  // http://docs.couchdb.org/en/latest/api/server/authn.html#cookie-authentication\n  function auth(username, password, callback) {\n    return relax({\n      method: 'POST',\n      db: '_session',\n      form: {\n        name: username,\n        password: password\n      }\n    }, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/server/authn.html#post--_session\n  function session(callback) {\n    return relax({db: '_session'}, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/server/common.html#get--_db_updates\n  function updates(qs, callback) {\n    if (typeof qs === 'function') {\n      callback = qs;\n      qs = {};\n    }\n    return relax({\n      db: '_db_updates',\n      qs: qs\n    }, callback);\n  }\n\n  function followUpdates(qs, callback) {\n    return followDb('_db_updates', qs, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/database/common.html#put--db\n  function createDb(dbName, callback) {\n    return relax({db: dbName, method: 'PUT'}, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/database/common.html#delete--db\n  function destroyDb(dbName, callback) {\n    return relax({db: dbName, method: 'DELETE'}, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/database/common.html#get--db\n  function getDb(dbName, callback) {\n    return relax({db: dbName}, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/server/common.html#get--_all_dbs\n  function listDbs(callback) {\n    return relax({db: '_all_dbs'}, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/database/compact.html#post--db-_compact\n  function compactDb(dbName, ddoc, callback) {\n    if (typeof ddoc === 'function') {\n      callback = ddoc;\n      ddoc = null;\n    }\n    return relax({\n      db: dbName,\n      doc: '_compact',\n      att: ddoc,\n      method: 'POST'\n    }, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/database/changes.html#get--db-_changes\n  function changesDb(dbName, qs, callback) {\n    if (typeof qs === 'function') {\n      callback = qs;\n      qs = {};\n    }\n    return relax({db: dbName, path: '_changes', qs: qs}, callback);\n  }\n\n  function followDb(dbName, qs, callback) {\n    if (typeof qs === 'function') {\n      callback = qs;\n      qs = {};\n    }\n\n    qs.db = urlResolveFix(cfg.url, encodeURIComponent(dbName));\n\n    if (typeof callback === 'function') {\n      return followAgent(qs, callback);\n    } else {\n      return new followAgent.Feed(qs);\n    }\n  }\n\n  function _serializeAsUrl(db) {\n    if (typeof db === 'object' && db.config && db.config.url && db.config.db) {\n      return urlResolveFix(db.config.url, encodeURIComponent(db.config.db));\n    } else {\n      return db;\n    }\n  }\n\n  // http://docs.couchdb.org/en/latest/api/server/common.html#post--_replicate\n  function replicateDb(source, target, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    opts.source = _serializeAsUrl(source);\n    opts.target = _serializeAsUrl(target);\n\n    return relax({db: '_replicate', body: opts, method: 'POST'}, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/server/common.html#uuids\n  function uuids(count, callback) {\n    if (typeof count === 'function') {\n      callback = count;\n      count = 1;\n    }\n\n    return relax({ method: 'GET', path: '_uuids', qs: {count: count}}, callback);\n  }\n\n  function docModule(dbName) {\n    var docScope = {};\n    dbName = decodeURIComponent(dbName);\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#put--db-docid\n    // http://docs.couchdb.org/en/latest/api/database/common.html#post--db\n    function insertDoc(doc, qs, callback) {\n      var opts = {db: dbName, body: doc, method: 'POST'};\n\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      if (typeof qs === 'string') {\n        qs = {docName: qs};\n      }\n\n      if (qs) {\n        if (qs.docName) {\n          opts.doc = qs.docName;\n          opts.method = 'PUT';\n          delete qs.docName;\n        }\n        opts.qs = qs;\n      }\n\n      return relax(opts, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#delete--db-docid\n    function destroyDoc(docName, rev, callback) {\n      if(!docName) {\n        if(callback)\n          callback(\"Invalid doc id\", null);\n      }\n      else {\n        return relax({\n          db: dbName,\n          doc: docName,\n          method: 'DELETE',\n          qs: {rev: rev}\n        }, callback);\n      }\n    }\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#get--db-docid\n    function getDoc(docName, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      return relax({db: dbName, doc: docName, qs: qs}, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#head--db-docid\n    function headDoc(docName, callback) {\n      return relax({\n        db: dbName,\n        doc: docName,\n        method: 'HEAD',\n        qs: {}\n      }, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#copy--db-docid\n    function copyDoc(docSrc, docDest, opts, callback) {\n      if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n      }\n\n      var qs = {\n        db: dbName,\n        doc: docSrc,\n        method: 'COPY',\n        headers: {'Destination': docDest}\n      };\n\n      if (opts.overwrite) {\n        return headDoc(docDest, function(e, b, h) {\n          if (e && e.statusCode !== 404) {\n            return callback(e);\n          }\n          if (h.etag) {\n            qs.headers.Destination += '?rev=' +\n              h.etag.substring(1, h.etag.length - 1);\n          }\n          return relax(qs, callback);\n        });\n      } else {\n        return relax(qs, callback);\n      }\n    }\n\n    // http://docs.couchdb.org/en/latest/api/database/bulk-api.html#get--db-_all_docs\n    function listDoc(qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      return relax({db: dbName, path: '_all_docs', qs: qs}, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/database/bulk-api.html#post--db-_all_docs\n    function fetchDocs(docNames, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      qs = qs || {};\n      qs['include_docs'] = true;\n\n      return relax({\n        db: dbName,\n        path: '_all_docs',\n        method: 'POST',\n        qs: qs,\n        body: docNames\n      }, callback);\n    }\n\n    function fetchRevs(docNames, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n      return relax({\n        db: dbName,\n        path: '_all_docs',\n        method: 'POST',\n        qs: qs,\n        body: docNames\n      }, callback);\n    }\n\n    function view(ddoc, viewName, meta, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      var viewPath = '_design/' + ddoc + '/_' + meta.type + '/'  + viewName;\n\n      // Several search parameters must be JSON-encoded; but since this is an\n      // object API, several parameters need JSON endoding.\n      var paramsToEncode = ['counts', 'drilldown', 'group_sort', 'ranges', 'sort'];\n      paramsToEncode.forEach(function(param) {\n        if (param in qs) {\n          if (typeof qs[param] !== 'string') {\n            qs[param] = JSON.stringify(qs[param]);\n          } else {\n            // if the parameter is not already encoded, encode it\n            try {\n              JSON.parse(qs[param]);\n            } catch(e) {\n              qs[param] = JSON.stringify(qs[param]);\n            }\n          }\n        }\n      });\n\n      if (qs && qs.keys) {\n        var body = {keys: qs.keys};\n        delete qs.keys;\n        return relax({\n          db: dbName,\n          path: viewPath,\n          method: 'POST',\n          qs: qs,\n          body: body\n        }, callback);\n      } else {\n        var req = {\n          db: dbName,\n          method: meta.method || 'GET',\n          path: viewPath,\n          qs: qs\n        };\n\n        if (meta.body) {\n          req.body = meta.body;\n        }\n\n        return relax(req, callback);\n      }\n    }\n\n    // http://docs.couchdb.org/en/latest/api/ddoc/views.html#post--db-_design-ddoc-_view-view\n    function viewDocs(ddoc, viewName, qs, callback) {\n      return view(ddoc, viewName, {type: 'view'}, qs, callback);\n    }\n\n    // geocouch\n    function viewSpatial(ddoc, viewName, qs, callback) {\n      return view(ddoc, viewName, {type: 'spatial'}, qs, callback);\n    }\n\n    // cloudant\n    function viewSearch(ddoc, viewName, qs, callback) {\n      return view(ddoc, viewName, {type: 'search'}, qs, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/ddoc/render.html#get--db-_design-ddoc-_show-func\n    function showDoc(ddoc, viewName, docName, qs, callback) {\n      return view(ddoc, viewName + '/' + docName, {type: 'show'}, qs, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/ddoc/render.html#put--db-_design-ddoc-_update-func-docid\n    function updateWithHandler(ddoc, viewName, docName, body, callback) {\n      if (typeof body === 'function') {\n          callback = body;\n          body = undefined;\n      }\n      return view(ddoc, viewName + '/' + encodeURIComponent(docName), {\n        type: 'update',\n        method: 'PUT',\n        body: body\n      }, callback);\n    }\n\n    function viewWithList(ddoc, viewName, listName, qs, callback) {\n      return view(ddoc, listName + '/' + viewName, {\n        type: 'list'\n      }, qs, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/database/bulk-api.html#post--db-_bulksDoc\n    function bulksDoc(docs, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      return relax({\n        db: dbName,\n        path: '_bulk_docs',\n        body: docs,\n        method: 'POST',\n        qs: qs\n      }, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#creating-multiple-attachments\n    function insertMultipart(doc, attachments, qs, callback) {\n      if (typeof qs === 'string') {\n        qs = {docName: qs};\n      }\n\n      var docName = qs.docName;\n      delete qs.docName;\n\n      doc = _.extend({_attachments: {}}, doc);\n\n      var multipart = [];\n\n      attachments.forEach(function(att) {\n        doc._attachments[att.name] = {\n          follows: true,\n          length: Buffer.isBuffer(att.data) ?\n            att.data.length : Buffer.byteLength(att.data),\n          /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n          'content_type': att.content_type\n        };\n        multipart.push({body: att.data});\n      });\n\n      multipart.unshift({\n        'content-type': 'application/json',\n        body: JSON.stringify(doc)\n      });\n\n      return relax({\n        db: dbName,\n        method: 'PUT',\n        contentType: 'multipart/related',\n        doc: docName,\n        qs: qs,\n        multipart: multipart\n      }, callback);\n    }\n\n    function getMultipart(docName, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      qs.attachments = true;\n\n      return relax({\n        db: dbName,\n        doc: docName,\n        encoding: null,\n        contentType: 'multipart/related',\n        qs: qs\n      }, callback);\n    }\n\n    function insertAtt(docName, attName, att, contentType, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      return relax({\n        db: dbName,\n        att: attName,\n        method: 'PUT',\n        contentType: contentType,\n        doc: docName,\n        qs: qs,\n        body: att,\n        dontStringify: true\n      }, callback);\n    }\n\n    function getAtt(docName, attName, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      return relax({\n        db: dbName,\n        att: attName,\n        doc: docName,\n        qs: qs,\n        encoding: null,\n        dontParse: true\n      }, callback);\n    }\n\n    function destroyAtt(docName, attName, qs, callback) {\n      return relax({\n        db: dbName,\n        att: attName,\n        method: 'DELETE',\n        doc: docName,\n        qs: qs\n      }, callback);\n    }\n\n    // db level exports\n    docScope = {\n      info: function(cb) {\n        return getDb(dbName, cb);\n      },\n      replicate: function(target, opts, cb) {\n        return replicateDb(dbName, target, opts, cb);\n      },\n      compact: function(cb) {\n        return compactDb(dbName, cb);\n      },\n      changes: function(qs, cb) {\n        return changesDb(dbName, qs, cb);\n      },\n      follow: function(qs, cb) {\n        return followDb(dbName, qs, cb);\n      },\n      auth: auth,\n      session: session,\n      insert: insertDoc,\n      get: getDoc,\n      head: headDoc,\n      copy: copyDoc,\n      destroy: destroyDoc,\n      bulk: bulksDoc,\n      list: listDoc,\n      fetch: fetchDocs,\n      fetchRevs: fetchRevs,\n      config: {url: cfg.url, db: dbName},\n      multipart: {\n        insert: insertMultipart,\n        get: getMultipart\n      },\n      attachment: {\n        insert: insertAtt,\n        get: getAtt,\n        destroy: destroyAtt\n      },\n      show: showDoc,\n      atomic: updateWithHandler,\n      updateWithHandler: updateWithHandler,\n      search: viewSearch,\n      spatial: viewSpatial,\n      view: viewDocs,\n      viewWithList: viewWithList\n    };\n\n    docScope.view.compact = function(ddoc, cb) {\n      return compactDb(dbName, ddoc, cb);\n    };\n\n    return docScope;\n  }\n\n  // server level exports\n  serverScope = _.extend(serverScope, {\n    db: {\n      create: createDb,\n      get: getDb,\n      destroy: destroyDb,\n      list: listDbs,\n      use: docModule,\n      scope: docModule,\n      compact: compactDb,\n      replicate: replicateDb,\n      changes: changesDb,\n      follow: followDb,\n      followUpdates: followUpdates,\n      updates: updates\n    },\n    use: docModule,\n    scope: docModule,\n    request: relax,\n    relax: relax,\n    dinosaur: relax,\n    auth: auth,\n    session: session,\n    updates: updates,\n    followUpdates: followUpdates,\n    uuids: uuids\n  });\n\n  var db = maybeExtractDatabaseComponent();\n\n  return db ? docModule(db) : serverScope;\n};\n\n/*\n * and now an ascii dinosaur\n *              _\n *            / _) ROAR! i'm a vegan!\n *     .-^^^-/ /\n *  __/       /\n * /__.|_|-|_|\n *\n * thanks for visiting! come again!\n */\nnano.version = require('../package.json').version;\nnano.path    = __dirname;\n\nfunction urlResolveFix(couchUrl, dbName) {\n  if (/[^\\/]$/.test(couchUrl)) {\n    couchUrl += '/';\n  }\n  return u.resolve(couchUrl, dbName);\n}\n","/home/travis/build/npmtest/node-npmtest-cloudant/node_modules/cloudant-nano/lib/logger.js":"// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n// use this file except in compliance with the License. You may obtain a copy of\n// the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations under\n// the License.\n\n'use strict';\n\nvar debug = require('debug')('nano/logger');\n\nmodule.exports = function logging(cfg) {\n  var log = cfg && cfg.log;\n  var logStrategy = typeof log === 'function' ? log : debug;\n\n  return function logEvent(prefix) {\n    var eventId = (prefix ? prefix + '-' : '') +\n      (~~(Math.random() * 1e9)).toString(36);\n    return function log() {\n      logStrategy.call(this, eventId, [].slice.call(arguments, 0));\n    };\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cloudant/node_modules/cloudant/lib/reconfigure.js":"// reconfigure deals with the various ways the credentials can be passed in \n// and returns an full URL\n// e.g. { account:\"myaccount\", password: \"mypassword\"}\n// or   { key: \"mykey\", password: \"mykey\", account:\"myaccount\"}\n// or   { key: \"mykey\", password: \"mykey\", account:\"myaccount\"}\n// or   { account:\"myaccount.cloudant.com\", password: \"mykey\"}\n// or   { account: \"myaccount\"}\n// or   { url: \"https://mykey:mypassword@myaccount.cloudant.com\"}\n// or   { instanceName: \"mycloudantservice\", vcapServices: JSON.parse(process.env.VCAP_SERVICES)}\n\nvar url = require('url');\n\nmodule.exports = function(config) {\n  config = JSON.parse(JSON.stringify(config)); //clone\n\n  var outUrl; \n  // if a full URL is passed in\n  if (config.url) {\n    // parse the URL\n    var parsed = null;\n    try {\n      var parsed = url.parse(config.url);\n    } catch(e) {\n      parsed = null;\n    };\n    if (!config.url || !parsed || !parsed.hostname || !parsed.protocol || !parsed.slashes) {\n      return null;\n    }\n    \n\n    // enforce HTTPS for *cloudant.com domains\n    if (parsed.hostname.match(/cloudant\\.com$/) && parsed.protocol == \"http:\") {\n      \n      console.warn(\"WARNING: You are sending your password as plaintext over the HTTP; switching to HTTPS\");\n      \n      // force HTTPS\n      parsed.protocol = 'https:';\n      \n      // remove port number and path\n      parsed.host = parsed.host.replace(/:[0-9]*$/,'');\n      delete parsed.port; \n      delete parsed.pathname;\n      delete parsed.path;\n      \n      // reconstruct the URL\n      config.url = url.format(parsed);\n    }\n    \n    outUrl = config.url;\n\n  } else if (config.vcapServices) {\n    cloudantServices = config.vcapServices.cloudantNoSQLDB;\n\n    if (!cloudantServices || cloudantServices.length == 0) {\n      throw new Error('Missing Cloudant service in vcapServices');\n    }\n\n    for (var i = 0; i < cloudantServices.length; i++) {\n      if (config.instanceName == undefined || cloudantServices[i].name == config.instanceName) {\n        var credentials = cloudantServices[i].credentials;\n        if (credentials && credentials.url) {\n          outUrl = credentials.url;\n          break;\n        } else {\n          throw new Error('Invalid Cloudant service in vcapServices');\n        }\n      }\n    }\n\n    if (!outUrl) {\n      throw new Error('Missing Cloudant service in vcapServices');\n    }\n\n  } else {\n    // An account can be just the username, or the full cloudant URL.\n    var match = config.account &&\n                config.account.match &&\n                config.account.match(/([^.]+)\\.cloudant\\.com/);\n    if (match)\n      config.account = match[1];\n\n    var options = getOptions(config);\n    var username = options.username;\n    var password = options.password;\n\n    // Configure for Cloudant, either authenticated or anonymous.\n    if (config.account && password) {\n      config.url = 'https://' + encodeURIComponent(username) + ':' +\n                    encodeURIComponent(password) + '@' +\n                    encodeURIComponent(config.account) + '.cloudant.com';\n    }\n    else if (config.account) {\n      config.url = 'https://' + encodeURIComponent(config.account) +\n                   '.cloudant.com';\n    }\n    \n    outUrl = config.url;\n  }\n  \n  // We trim out the trailing `/` because when the URL tracks down to `nano` we have to \n  // worry that the trailing `/` doubles up depending on how URLs are built, this creates \n  // \"Database does not exist.\" errors. \n  // Issue: cloudant/nodejs-cloudant#129\n  if (outUrl && outUrl.slice(-1) == '/') {\n    outUrl = outUrl.slice(0, -1);\n  }\n  \n  return (outUrl || null);\n};\n\nmodule.exports.getOptions = getOptions;\nfunction getOptions(config) {\n  // The username is the account (\"foo\" for \"foo.cloudant.com\")\n  // or the third-party API key.\n  var result = {password:config.password, username: config.key || config.username || config.account};\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-cloudant/node_modules/cloudant/plugins/cookieauth.js":"/**\n * Copyright (c) 2015 IBM Cloudant, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n// this the the 'cookieauth' request handler.\n// Instead of passing the authentication credentials using HTTP Basic Auth with every request\n// we exchange the credentials for a cookie which we remember and pass back with each\n// subsequent request.\nvar async = require('async');\nvar debug = require('debug')('cloudant');\nvar stream = require('stream');\nvar u = require('url');\nvar nullcallback = function() {};\n\nmodule.exports = function(options) {\n  var requestDefaults = options.requestDefaults || {};\n  var request = require('request').defaults(requestDefaults);\n  var jar = request.jar();\n  var cookieRefresh = null;\n\n  // make a request using cookie authentication\n  // 1) if we have a cookie or have no credentials, just try the request\n  // 2) otherwise, get session cookie\n  // 3) then try the request\n  var cookieRequest = function (req, callback) {\n    \n    // deal with absence of callback\n    if (typeof callback !== 'function') {\n      callback = nullcallback;\n    }\n\n    // parse the url to extract credentials and calculate\n    // stuburl - the cloudant url without credentials or auth\n    // auth - whether there are credentials or not\n    // credentials - object containing username & password\n    var url = req.uri || req.url;\n    var parsed = u.parse(url);\n    var auth = parsed.auth;\n    var credentials = null;\n    delete parsed.auth;\n    delete parsed.href;\n    url = u.format(parsed);\n    if (auth) {\n      var bits = auth.split(':');\n      credentials = {\n        username: bits[0],\n        password: bits[1]\n      };\n    } \n    req.url = url;\n    delete req.uri;\n    delete parsed.path;\n    delete parsed.pathname;\n    var stuburl = u.format(parsed).replace(/\\/$/,'');\n\n    // to maintain streaming compatiblity, always return a PassThrough stream\n    var s = new stream.PassThrough();\n\n    // run these three things in series\n    async.series([\n\n      // call the request being asked for \n      function(done) {\n\n        // do we have cookie for this domain name?\n        var cookies = jar.getCookies(stuburl);\n        var statusCode = 500;\n\n        // if we have a cookie for this domain, then we can try the required API call straight away\n        if (!auth || cookies.length > 0) {\n          debug('we have cookies (or no credentials) so attempting API call straight away');\n          req.jar = jar;\n          request(req, function(e, h, b) {\n            // if we have no credentials or we suceeded\n            if (!auth || (statusCode >= 200 && statusCode < 400)) {\n              // returning an err of true stops the async sequence\n              // we're good because we didn't get a 4** or 5**\n              done(true, [e,h,b]);\n            } else {\n\n              // continue with the async chain\n              done(null, [e,h,b]);\n            }\n          }).on('response', function(r) {\n            statusCode = r && r.statusCode || 500;\n          }).on('data', function(chunk) {\n            // only write to the output stream on success\n            if (statusCode < 400) {\n              s.write(chunk);\n            }\n          }); \n\n        } else {\n          debug('we have no cookies - need to authenticate first');\n          // we have no cookies so we need to authenticate first\n          // i.e. do nothing here\n          done(null, null);\n        }\n\n      },\n\n      // call POST /_session to get a cookie\n      function(done) {\n        debug('need to authenticate - calling POST /_session');\n        var r = {\n          url: stuburl + '/_session', \n          method: 'post',\n          form: {\n            name: credentials.username,\n            password: credentials.password\n          },\n          jar: jar\n        };\n        request(r, function(e, h, b) {\n          var statusCode = h && h.statusCode || 500;\n          // if we sucessfully authenticate\n          if (statusCode >= 200 && statusCode < 400) {\n            // continue to the next stage of the async chain\n            debug('authentication successful');\n\n            // if we don't already have a timer set to refresh the cookie every hour,\n            // set one up\n            if (!cookieRefresh) {\n              debug('setting up recurring cookie refresh request');\n              cookieRefresh = setInterval(function() {\n                debug('refreshing cookie');\n                request({method: 'get', url: stuburl + '/_session', jar: jar});\n              }, 1000 * 60 * 60);\n              // prevent setInterval from requiring the event loop to be active\n              cookieRefresh.unref();\n            }\n\n            done(null, [e,h,b]);\n          } else {\n            // failed to authenticate - no point proceeding any further\n            debug('authentication failed');\n            done(true, [e,h,b]);\n          }\n        });\n      },\n\n      // call the request being asked for with cookie authentication\n      function(done) {\n        debug('attempting API call with cookie');\n        var statusCode = 500;\n        req.jar = jar;\n        request(req, function(e, h, b) {\n          done(null, [e,h,b]);\n        }).on('response', function(r) {\n          statusCode = r && r.statusCode || 500;\n        }).on('data', function(chunk) {\n          if (statusCode < 400) {\n            s.write(chunk);\n          }\n        }); \n      }\n    ], function(err, data) {\n        // callback with the last call we made\n        if (data && data.length > 0) {\n          var reply = data[data.length - 1];\n          // error, headers, body\n          callback(reply[0], reply[1], reply[2]);\n        } else {\n          callback(err, { statusCode: 500 }, null);\n        }\n    });\n\n    // return the pass-through stream\n    return s;\n  };\n\n\n  return cookieRequest;\n};\n\n","/home/travis/build/npmtest/node-npmtest-cloudant/node_modules/cloudant/plugins/default.js":"/**\n * Copyright (c) 2015 IBM Cloudant, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n// this the the 'default' request handler.\n// It is simply an instance of the popular 'request' npm module.\n// This is the simplest module to use as it supports JavaScript callbacks\n// and can be used for with the Node.js streaming API.\n\nmodule.exports = function(options) {\n  var requestDefaults = options.requestDefaults || {jar: false};\n  return require('request').defaults(requestDefaults);\n}","/home/travis/build/npmtest/node-npmtest-cloudant/node_modules/cloudant/plugins/promises.js":"/**\n * Copyright (c) 2015 IBM Cloudant, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n// this the the 'promises' request handler.\n// It is a function that returns a Promise and resolves the promise on success \n// or rejects the Promise on failure\n\nvar nullcallback = function() {};\n\nmodule.exports = function(options) {\n\n  var requestDefaults = options.requestDefaults || {jar: false};\n  var request = require('request').defaults(requestDefaults);\n  var myrequest = function(req, callback) {\n    if (typeof callback !== 'function') {\n      callback = nullcallback;\n    }\n    return new Promise(function(resolve, reject) {\n      request(req, function(err, h, b) {\n        var statusCode = h && h.statusCode || 500;\n        if (b) {\n          try { b = JSON.parse(b); } catch (err) {  }\n        }\n        if (statusCode >= 200 && statusCode < 400) {\n          callback(null, h, b);\n          return resolve(b);\n        }\n        if (b) {\n          b.statusCode = statusCode;\n        }\n        reject(err || b);\n        callback(err, h, b);\n      })\n    });\n  };\n\n  return myrequest;\n};\n    \n    ","/home/travis/build/npmtest/node-npmtest-cloudant/node_modules/cloudant/plugins/retry.js":"/**\n * Copyright (c) 2015 IBM Cloudant, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n// this the the 'retry' request handler.\n// If CouchDB/Cloudant responds with a 429 HTTP code\n// the library will retry the request up to three\n// times with exponential backoff.\n// This module is unsuitable for streaming requests.\nvar async = require('async');\nvar debug = require('debug')('cloudant');\nvar stream = require('stream');\n\nvar nullcallback = function() {};\n\nmodule.exports = function(options) {\n  var requestDefaults = options.requestDefaults || {jar: false};\n  var request = require('request').defaults(requestDefaults);\n\n  var myrequest = function(req, callback) {\n    var attempts = 0;\n    var maxAttempts = options.retryAttempts || 3;\n    var firstTimeout = options.retryTimeout || 500; // ms\n    var timeout = 0; // ms\n    var statusCode = null;\n\n    if (typeof callback !== 'function') {\n      callback = nullcallback;\n    }\n\n    // create a pass-through stream in case the caller wishes\n    // to pipe data using Node.js streams\n    var s = new stream.PassThrough();\n\n    // do the first function until the second function returns true\n    async.doUntil(function(done) {\n      statusCode = 500;\n      attempts++;\n      if (attempts >= 1) {\n        debug('attempt', attempts, 'timeout', timeout);\n      }\n      setTimeout(function() {\n        request(req, function(e, h, b) {\n          done(null, [e, h, b]);\n        }).on('response', function(r) {\n          statusCode = r && r.statusCode || 500;\n        }).on('data', function(chunk) {\n          if (statusCode !== 429) {\n            s.write(chunk);\n          }\n        });  \n      }, timeout);\n    }, function() {\n      // this function returns false for the first 'maxAttempts' 429s receieved\n      if (statusCode === 429 && attempts < maxAttempts) {\n        if (attempts === 1) {\n          timeout = firstTimeout;\n        } else {\n          timeout *= 2;\n        }\n        return false;\n      } \n      return true;\n    }, function(e, results) {\n      s.end();\n      callback(results[0], results[1], results[2])\n    });\n\n    // return the pass-through stream\n    return s;\n  };\n\n  return myrequest;\n};\n    \n    \n    "}